"use strict";(self.webpackChunkwhiskeysockets_github_io=self.webpackChunkwhiskeysockets_github_io||[]).push([[4884],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=l(n),g=s,m=u["".concat(c,".").concat(g)]||u[g]||d[g]||r;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,i=new Array(r);i[0]=g;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[u]="string"==typeof e?e:s,i[1]=o;for(var l=2;l<r;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},3233:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var a=n(7462),s=(n(7294),n(3905));const r={sidebar_position:3},i="Handling Events",o={unversionedId:"tutorial-basics/handling-events",id:"tutorial-basics/handling-events",title:"Handling Events",description:"Baileys uses the EventEmitter syntax for events.",source:"@site/docs/tutorial-basics/handling-events.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/handling-events",permalink:"/docs/tutorial-basics/handling-events",draft:!1,editUrl:"https://github.com/WhiskeySockets/whiskeysockets.github.io/tree/main/docs/tutorial-basics/handling-events.md",tags:[],version:"current",lastUpdatedAt:1718621597,formattedLastUpdatedAt:"Jun 17, 2024",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Saving & Restoring Sessions",permalink:"/docs/tutorial-basics/saving-session"},next:{title:"Implementing a Data Store",permalink:"/docs/tutorial-basics/implementing-data-store"}},c={},l=[],p={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,s.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"handling-events"},"Handling Events"),(0,s.kt)("p",null,"Baileys uses the EventEmitter syntax for events.\nThey're all nicely typed up, so you shouldn't have any issues with an Intellisense editor like VS Code."),(0,s.kt)("p",null,"The events are typed as mentioned here:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'export type BaileysEventMap = {\n  /** connection state has been updated -- WS closed, opened, connecting etc. */\n  "connection.update": Partial<ConnectionState>;\n  /** credentials updated -- some metadata, keys or something */\n  "creds.update": Partial<AuthenticationCreds>;\n  /** history sync, everything is reverse chronologically sorted */\n  "messaging-history.set": {\n    chats: Chat[];\n    contacts: Contact[];\n    messages: WAMessage[];\n    isLatest: boolean;\n  };\n  /** upsert chats */\n  "chats.upsert": Chat[];\n  /** update the given chats */\n  "chats.update": Partial<Chat>[];\n  /** delete chats with given ID */\n  "chats.delete": string[];\n  /** presence of contact in a chat updated */\n  "presence.update": {\n    id: string;\n    presences: { [participant: string]: PresenceData };\n  };\n\n  "contacts.upsert": Contact[];\n  "contacts.update": Partial<Contact>[];\n\n  "messages.delete": { keys: WAMessageKey[] } | { jid: string; all: true };\n  "messages.update": WAMessageUpdate[];\n  "messages.media-update": {\n    key: WAMessageKey;\n    media?: { ciphertext: Uint8Array; iv: Uint8Array };\n    error?: Boom;\n  }[];\n  /**\n   * add/update the given messages. If they were received while the connection was online,\n   * the update will have type: "notify"\n   *  */\n  "messages.upsert": { messages: WAMessage[]; type: MessageUpsertType };\n  /** message was reacted to. If reaction was removed -- then "reaction.text" will be falsey */\n  "messages.reaction": { key: WAMessageKey; reaction: proto.IReaction }[];\n\n  "message-receipt.update": MessageUserReceiptUpdate[];\n\n  "groups.upsert": GroupMetadata[];\n  "groups.update": Partial<GroupMetadata>[];\n  /** apply an action to participants in a group */\n  "group-participants.update": {\n    id: string;\n    participants: string[];\n    action: ParticipantAction;\n  };\n\n  "blocklist.set": { blocklist: string[] };\n  "blocklist.update": { blocklist: string[]; type: "add" | "remove" };\n  /** Receive an update on a call, including when the call was received, rejected, accepted */\n  call: WACallEvent[];\n};\n')),(0,s.kt)("p",null,"You can listen to these events like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'const sock = makeWASocket();\nsock.ev.on("messages.upsert", ({ messages }) => {\n  console.log("got messages", messages);\n});\n')))}d.isMDXComponent=!0}}]);