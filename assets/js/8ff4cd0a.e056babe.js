"use strict";(self.webpackChunkwhiskeysockets_github_io=self.webpackChunkwhiskeysockets_github_io||[]).push([[1847],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=o.createContext({}),l=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},g=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(n),g=i,m=p["".concat(c,".").concat(g)]||p[g]||d[g]||r;return n?o.createElement(m,a(a({ref:t},u),{},{components:n})):o.createElement(m,a({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=g;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:i,a[1]=s;for(var l=2;l<r;l++)a[l]=n[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"},1751:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var o=n(7462),i=(n(7294),n(3905));const r={sidebar_position:1},a="Configuring the Connection",s={unversionedId:"tutorial-basics/configuration",id:"tutorial-basics/configuration",title:"Configuring the Connection",description:"You can configure the connection by passing a SocketConfig object.",source:"@site/docs/tutorial-basics/configuration.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/configuration",permalink:"/docs/tutorial-basics/configuration",draft:!1,editUrl:"https://github.com/WhiskeySockets/whiskeysockets.github.io/tree/main/docs/tutorial-basics/configuration.md",tags:[],version:"current",lastUpdatedAt:1718621597,formattedLastUpdatedAt:"Jun 17, 2024",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Tutorial - Basics",permalink:"/docs/category/tutorial---basics"},next:{title:"Saving & Restoring Sessions",permalink:"/docs/tutorial-basics/saving-session"}},c={},l=[{value:"Emulating the Desktop app instead of the web",id:"emulating-the-desktop-app-instead-of-the-web",level:3}],u={toc:l},p="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"configuring-the-connection"},"Configuring the Connection"),(0,i.kt)("p",null,"You can configure the connection by passing a ",(0,i.kt)("inlineCode",{parentName:"p"},"SocketConfig")," object."),(0,i.kt)("p",null,"The entire ",(0,i.kt)("inlineCode",{parentName:"p"},"SocketConfig")," structure is mentioned here with default values:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'type SocketConfig = {\n  /** the WS url to connect to WA */\n  waWebSocketUrl: string | URL;\n  /** Fails the connection if the socket times out in this interval */\n  connectTimeoutMs: number;\n  /** Default timeout for queries, undefined for no timeout */\n  defaultQueryTimeoutMs: number | undefined;\n  /** ping-pong interval for WS connection */\n  keepAliveIntervalMs: number;\n  /** proxy agent */\n  agent?: Agent;\n  /** pino logger */\n  logger: Logger;\n  /** version to connect with */\n  version: WAVersion;\n  /** override browser config */\n  browser: WABrowserDescription;\n  /** agent used for fetch requests -- uploading/downloading media */\n  fetchAgent?: Agent;\n  /** should the QR be printed in the terminal */\n  printQRInTerminal: boolean;\n  /** should events be emitted for actions done by this socket connection */\n  emitOwnEvents: boolean;\n  /** provide a cache to store media, so does not have to be re-uploaded */\n  mediaCache?: NodeCache;\n  /** custom upload hosts to upload media to */\n  customUploadHosts: MediaConnInfo["hosts"];\n  /** time to wait between sending new retry requests */\n  retryRequestDelayMs: number;\n  /** time to wait for the generation of the next QR in ms */\n  qrTimeout?: number;\n  /** provide an auth state object to maintain the auth state */\n  auth: AuthenticationState;\n  /** manage history processing with this control; by default will sync up everything */\n  shouldSyncHistoryMessage: (\n    msg: proto.Message.IHistorySyncNotification\n  ) => boolean;\n  /** transaction capability options for SignalKeyStore */\n  transactionOpts: TransactionCapabilityOptions;\n  /** provide a cache to store a user\'s device list */\n  userDevicesCache?: NodeCache;\n  /** marks the client as online whenever the socket successfully connects */\n  markOnlineOnConnect: boolean;\n  /**\n   * map to store the retry counts for failed messages;\n   * used to determine whether to retry a message or not */\n  msgRetryCounterMap?: MessageRetryMap;\n  /** width for link preview images */\n  linkPreviewImageThumbnailWidth: number;\n  /** Should Baileys ask the phone for full history, will be received async */\n  syncFullHistory: boolean;\n  /** Should baileys fire init queries automatically, default true */\n  fireInitQueries: boolean;\n  /**\n   * generate a high quality link preview,\n   * entails uploading the jpegThumbnail to WA\n   * */\n  generateHighQualityLinkPreview: boolean;\n\n  /** options for axios */\n  options: AxiosRequestConfig<any>;\n  /**\n   * fetch a message from your store\n   * implement this so that messages failed to send (solves the "this message can take a while" issue) can be retried\n   * */\n  getMessage: (key: proto.IMessageKey) => Promise<proto.IMessage | undefined>;\n};\n')),(0,i.kt)("h3",{id:"emulating-the-desktop-app-instead-of-the-web"},"Emulating the Desktop app instead of the web"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Baileys, by default, emulates a chrome web session"),(0,i.kt)("li",{parentName:"ol"},"If you'd like to emulate a desktop connection (and receive more message history), add this to your Socket config:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const conn = makeWASocket({\n  ...otherOpts,\n  // can use Windows, Ubuntu here too\n  browser: Browsers.macOS("Desktop"),\n  syncFullHistory: true,\n});\n')))))}d.isMDXComponent=!0}}]);